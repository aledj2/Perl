#!/usr/bin/perl
use List::MoreUtils qw(uniq);
use strict;
use warnings;
 
open INPUT, '<', 'c:\perl\MokaPipelinetest.txt' or die $!;
my @MOKA = <INPUT>;
my$MOKA;
my $CHROM;
my $POS;
my $ID;
my $REF;
my $ALT;
my $QUAL;
my $FILTER;
my $INFO;
my $FORMAT;
my $A;
#opens file under handle Input which is then put into the array Moka. Each vairable is then defined.

open INPUT2, '<', 'c:\perl\NextGene2.csv' or die $!;
my @NEXTGENE = <INPUT2>;
my $NEXTGENE;
my $Index;
my $ReferencePos;
my $ChromPos;
my $Gene;
my $GeneDir;
my $mRNA;
my $RNAAcc;
my $CDS;
my $ProteinAcc;
my $Chr;
my $SegmentDis;
my $SegmentPos;
my $ReferenceNuc;
my $Coverage;
my $Score;
my $ARatio;
my $CRatio;
my $GRatio;
my $TRatio;
my $InsRatio;
my $DelRatio;
my $SNPdbxref;
my $Genotype;
my $Mutation;
my $AAChange;
my $Concat;
my $VLookup;
my $MAF;
my $SNPorNOT;
# The second file is opened, under a input2 and then entered into a second array (@NEXTGENE). all variables defined.

my @same;
my $same;
($same)=@same;
my @all;
my $all;
($all)=@all;
my @header;
# The above defines arrays and variables used in following nested loop.

#Below each line of the MOKA file is compared to each row of the NEXTGENE file. This requires the line being split. However this will only find lines that are unique to MOKA This script is rerpeated below with the files in the reverse order.

# the below aims to take each line of the array, and split it into each variable, creating an new array for each line (@s).
foreach $MOKA (@MOKA) {
 my @s = split(/\t/, $MOKA);
 # each variable in the array @s is named allowing them to be called below.
 ($CHROM, $POS, $ID, $REF, $ALT, $QUAL, $FILTER, $INFO, $FORMAT, $A) = @s;
 #the Chrom field needs editing to match the format of the second file. The text chr is removed using the substr tool.
 my $CHROM2 = substr($CHROM,3);
 #the second file is split and entered into a new array @ss where each variable is also named.
 		foreach $NEXTGENE (@NEXTGENE) {
		 my @ss = split (/,/,$NEXTGENE);
		 ($Index,$ReferencePos,$ChromPos,$Gene,$GeneDir,$mRNA,$RNAAcc,$CDS,$ProteinAcc,$Chr,$SegmentDis,$SegmentPos,$ReferenceNuc,$Coverage,$Score,$ARatio,$CRatio,$GRatio,$TRatio,$InsRatio,$DelRatio,$SNPdbxref,$Genotype, $Mutation,$AAChange, $Concat,$VLookup,$MAF,$SNPorNOT) = @ss;
#an if statement compares the chromosome and the position. if these match then the fields are concatenated and pushed into an array @same 
		 if ($Chr eq $CHROM2 and $ChromPos == $POS) {
		push @same, "$CHROM2:$POS\n";
#to catch the headers any entries with text are pushed into a array @headers.
		} elsif ($CHROM eq "#CHROM") {
		push @header, "$CHROM2:$POS\n";
		#everything else goes into @all. this will contain an entry from every comparison so will be very large (have duplicates)and also include entries that are in both files but as they are being compared to each line will still fail the criteria set above.
		} else {push @all, "$CHROM2:$POS\n";
		}
		}
		}
		
# as above files are split and a new array created with named variables.
#it is very important to ensure the correct information is pushed into the arrays and the correct text is used for the header filter.
foreach $NEXTGENE (@NEXTGENE){
my @p = split (/,/,$NEXTGENE);
($Index,$ReferencePos,$ChromPos,$Gene,$GeneDir,$mRNA,$RNAAcc,$CDS,$ProteinAcc,$Chr,$SegmentDis,$SegmentPos,$ReferenceNuc,$Coverage,$Score,$ARatio,$CRatio,$GRatio,$TRatio,$InsRatio,$DelRatio,$SNPdbxref,$Genotype, $Mutation,$AAChange, $Concat,$VLookup,$MAF,$SNPorNOT) = @p;
	foreach $MOKA (@MOKA){
		my@pp = split(/\t/, $MOKA);
		($CHROM, $POS, $ID, $REF, $ALT, $QUAL, $FILTER, $INFO, $FORMAT, $A) = @pp;
		 my $CHROM3 = substr($CHROM,3);
		  if ($Chr eq $CHROM3 and $ChromPos ==$POS){
		 	push @same, "$Chr:$ChromPos\n";
		 	} elsif ($Chr eq "Chr") {
			push @header, "$Chr:$ChromPos\n";
		 	} else {push @all, "$Chr:$ChromPos\n";
			}
		}
	}


 my@uniquediff = uniq(@all);
 my $uniquediff;
 ($uniquediff)=@uniquediff;
 # a new array is created containing and the unique tool used to remove duplicates. as discussed above the @all array will contain every single line being compared including the ones that are in both files.
 
 #then to show only entries that are in one file and not the other. grep is used to search the @same array for each entry of the uniquediff array. If a line is not in the same array then it will be printed as it is in one file but not the other.
 print "DIFFERENT: \n";
 foreach $uniquediff (@uniquediff){
  print $uniquediff if ! grep (/$uniquediff/, @same)
};

close (INPUT);
close (INPUT2);
